// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.9.1
// source: tokibackend.proto

package com_linkedin_toki_grpcbackend_protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokiBackendClient is the client API for TokiBackend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokiBackendClient interface {
	// Ping the toki backend server
	TokiServer(ctx context.Context, in *TokiServerRequest, opts ...grpc.CallOption) (*Toki, error)
}

type tokiBackendClient struct {
	cc grpc.ClientConnInterface
}

func NewTokiBackendClient(cc grpc.ClientConnInterface) TokiBackendClient {
	return &tokiBackendClient{cc}
}

func (c *tokiBackendClient) TokiServer(ctx context.Context, in *TokiServerRequest, opts ...grpc.CallOption) (*Toki, error) {
	out := new(Toki)
	err := c.cc.Invoke(ctx, "/com.linkedin.toki.grpcbackend.protobuf.TokiBackend/TokiServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokiBackendServer is the server API for TokiBackend service.
// All implementations must embed UnimplementedTokiBackendServer
// for forward compatibility
type TokiBackendServer interface {
	// Ping the toki backend server
	TokiServer(context.Context, *TokiServerRequest) (*Toki, error)
	mustEmbedUnimplementedTokiBackendServer()
}

// UnimplementedTokiBackendServer must be embedded to have forward compatible implementations.
type UnimplementedTokiBackendServer struct {
}

func (UnimplementedTokiBackendServer) TokiServer(context.Context, *TokiServerRequest) (*Toki, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokiServer not implemented")
}
func (UnimplementedTokiBackendServer) mustEmbedUnimplementedTokiBackendServer() {}

// UnsafeTokiBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokiBackendServer will
// result in compilation errors.
type UnsafeTokiBackendServer interface {
	mustEmbedUnimplementedTokiBackendServer()
}

func RegisterTokiBackendServer(s grpc.ServiceRegistrar, srv TokiBackendServer) {
	s.RegisterService(&TokiBackend_ServiceDesc, srv)
}

func _TokiBackend_TokiServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokiServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokiBackendServer).TokiServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.linkedin.toki.grpcbackend.protobuf.TokiBackend/TokiServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokiBackendServer).TokiServer(ctx, req.(*TokiServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokiBackend_ServiceDesc is the grpc.ServiceDesc for TokiBackend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokiBackend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.linkedin.toki.grpcbackend.protobuf.TokiBackend",
	HandlerType: (*TokiBackendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokiServer",
			Handler:    _TokiBackend_TokiServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokibackend.proto",
}
